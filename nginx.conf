worker_processes                    8;
worker_rlimit_nofile                262144;

events {
  worker_connections                16384;
  multi_accept                      on;
  use                               epoll;
}

http {
    # Caches information about open FDs, freqently accessed files.
    open_file_cache                 max=100 inactive=30m;
    open_file_cache_valid           20m;
    open_file_cache_min_uses        2;
    open_file_cache_errors          off;

    sendfile                        on;
    tcp_nopush                      on;
    tcp_nodelay                     on;

    server_tokens                   off;

    #Specify a charset
    charset utf-8;

    # Timeouts globales.
    client_body_timeout             10s;
    client_header_timeout           10s;
    client_max_body_size            1M;

    keepalive_requests              1;
    keepalive_timeout               0;

    include                         /etc/nginx/mime.types;

    # default_type                    'text/plain';
    default_type                    'text/html';
    log_format upstreaminfo '$remote_addr - [$time_local] "$request" "$http_x_code.$http_x_format" $status "$http_referer" "$http_user_agent" $request_length $request_time';

    access_log /var/log/nginx/access.log upstreaminfo;
    error_log  /var/log/nginx/error.log;
    
    server {
        listen 80 default_server reuseport;
        root /var/www/html;
        index 404.html;
    
        location / {
            content_by_lua_block {
                local code = ngx.req.get_headers()["X-Code"] or "404"
                 res = ngx.location.capture("/"..code..".html")
                 if res.status ~= 200 then
                     ngx.exit(500)
                 end
             ngx.status = tonumber(code)
             ngx.say(res.body)
            }
        }

        location ~ "([0-9]{3}|[0-9][a-z]{2})\.[a-z]{1,4}$" {
            try_files $uri /404.html;
        }

        location /nginx_status {
            allow 127.0.0.1;
            deny all;
    
            access_log off;
            stub_status on;
        }

        location /healthz {
            return 200;
        }

        location /_ah/health {
            return 200;
        }
    }
}
